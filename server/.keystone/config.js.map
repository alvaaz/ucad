{
  "version": 3,
  "sources": ["../keystone.ts", "../schema.ts", "../config.ts", "../auth.ts"],
  "sourcesContent": ["import { config } from '@keystone-6/core';\nimport { lists } from './schema';\nimport { PORT, DATABASE_URL } from './config';\nimport { withAuth, session } from './auth';\n\n\nexport default withAuth(\n  config({\n    db: {\n      provider: 'postgresql',\n      useMigrations: true,\n      url: DATABASE_URL,\n    },\n    server: {\n      port: PORT,\n      cors: {\n        credentials: true,\n        origin: [\n          `localhost:3000`\n        ],\n      },\n    },\n    lists,\n    session,\n    graphql: {\n      path: '/api/graphql',\n      cors: {\n        origin: [\n          `localhost:3000`\n        ],\n        credentials: true,\n      },\n    }\n  })\n);\n", "import dotenv from \"dotenv\";\n\ndotenv.config();\n\nimport { list } from '@keystone-6/core';\nimport { allowAll } from '@keystone-6/core/access';\n\nimport {\n  text,\n  password,\n  timestamp\n} from '@keystone-6/core/fields';\n\nimport { cloudinaryImage } from \"@keystone-6/cloudinary\";\n\nimport type { Lists } from '.keystone/types';\n\nfunction buildSlug(input: string) {\n  return input\n    .normalize(\"NFD\")\n    .replace(/[\\u0300-\\u036f]/g, \"\")\n    .trim()\n    .toLowerCase()\n    .replace(/[^\\w ]+/g, \"\")\n    .replace(/ +/g, \"-\");\n}\n\nexport const lists: Lists = {\n  User: list({\n    access: allowAll,\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n      email: text({\n        validation: { isRequired: true },\n        isIndexed: 'unique',\n      }),\n\n      password: password({ validation: { isRequired: true } }),\n      createdAt: timestamp({\n        defaultValue: { kind: 'now' },\n      }),\n    },\n  }),\n  Partner: list({\n  access: allowAll,\n    fields: {\n    name: text({ validation: { isRequired: true } }),\n    photo: cloudinaryImage({\n      cloudinary: {\n        cloudName: process.env.CLOUDINARY_CLOUD_NAME as string,\n        apiKey: process.env.CLOUDINARY_API_KEY as string,\n        apiSecret: process.env.CLOUDINARY_API_SECRET as string,\n        folder: process.env.CLOUDINARY_API_FOLDER as string,\n      },\n    }),\n    slug: text({\n        isIndexed: \"unique\",\n        hooks: {\n          resolveInput: ({\n            operation,\n            resolvedData,\n            inputData,\n          }: {\n            operation: string;\n            resolvedData: any;\n            inputData: any;\n          }) => {\n            if (operation === \"create\" && !inputData.slug) {\n              return buildSlug(inputData.name);\n            }\n            return resolvedData.slug;\n          },\n        },\n        ui: {\n          listView: { fieldMode: \"hidden\" },\n        },\n      })\n    }\n  })\n};\n", "import dotenv from 'dotenv'\n\ndotenv.config()\n\nexport const PORT = parseInt(process.env.PORT!) || 3000;\n\nexport const DATABASE_URL = process.env.DATABASE_URL ||\u00A0`postgres://${process.env.PGUSER}:${process.env.PGPASSWORD}@${process.env.PGHOST}/${process.env.PGDATABASE}`;\n\nexport const SESSION_MAX_AGE = parseInt(process.env.SESSION_MAX_AGE!) || 60 * 60 * 24 * 30;\n\nexport const SESSION_SECRET =\n  process.env.SESSION_SECRET ||\n  require('crypto')\n    .randomBytes(32)\n    .toString('base64')\n    .replace(/[^a-zA-Z0-9]+/g, '');\n", "import { createAuth } from '@keystone-6/auth';\nimport { statelessSessions } from '@keystone-6/core/session';\nimport { SESSION_MAX_AGE, SESSION_SECRET } from './config';\n\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n  secretField: 'password',\n  initFirstItem: {\n    fields: ['name', 'email', 'password'],\n  },\n});\n\nconst session = statelessSessions({\n  maxAge: SESSION_MAX_AGE,\n  secret: SESSION_SECRET,\n});\n\nexport { withAuth, session };\n"],
  "mappings": "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",
  "names": ["import_core", "dotenv", "import_dotenv", "dotenv"]
}
